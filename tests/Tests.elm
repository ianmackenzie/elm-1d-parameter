module Tests exposing
    ( firstValueOfStepsIsZero
    , inBetweenFunctionsAreEquivalent
    , inBetweenIsStepsMinusFirstAndLastElements
    , lastValueOfStepsIsOne
    , leadingFunctionsAreEquivalent
    , leadingIsStepsMinusLastElement
    , manualCases
    , midpointsFunctionsAreEquivalent
    , stepsFunctionsAreEquivalent
    , trailingFunctionsAreEquivalent
    , trailingIsStepsMinusFirstElement
    )

import Array
import Expect
import Fuzz
import Parameter1d
import Parameter1d.Array
import Test exposing (Test)


stepsFunctionsAreEquivalent : Test
stepsFunctionsAreEquivalent =
    Test.fuzz (Fuzz.intRange 0 100)
        "steps functions should be equivalent"
        (\n ->
            Parameter1d.Array.steps n identity
                |> Array.toList
                |> Expect.equal (Parameter1d.steps n identity)
        )


leadingFunctionsAreEquivalent : Test
leadingFunctionsAreEquivalent =
    Test.fuzz (Fuzz.intRange 0 100)
        "leading functions should be equivalent"
        (\n ->
            Parameter1d.Array.leading n identity
                |> Array.toList
                |> Expect.equal (Parameter1d.leading n identity)
        )


trailingFunctionsAreEquivalent : Test
trailingFunctionsAreEquivalent =
    Test.fuzz (Fuzz.intRange 0 100)
        "trailing functions should be equivalent"
        (\n ->
            Parameter1d.Array.trailing n identity
                |> Array.toList
                |> Expect.equal (Parameter1d.trailing n identity)
        )


inBetweenFunctionsAreEquivalent : Test
inBetweenFunctionsAreEquivalent =
    Test.fuzz (Fuzz.intRange 0 100)
        "inBetween functions should be equivalent"
        (\n ->
            Parameter1d.Array.inBetween n identity
                |> Array.toList
                |> Expect.equal (Parameter1d.inBetween n identity)
        )


midpointsFunctionsAreEquivalent : Test
midpointsFunctionsAreEquivalent =
    Test.fuzz (Fuzz.intRange 0 100)
        "midpoints functions should be equivalent"
        (\n ->
            Parameter1d.Array.midpoints n identity
                |> Array.toList
                |> Expect.equal (Parameter1d.midpoints n identity)
        )


leadingIsStepsMinusLastElement : Test
leadingIsStepsMinusLastElement =
    Test.fuzz (Fuzz.intRange 0 100)
        "leading should return the result of steps minus the last element"
        (\n ->
            Parameter1d.steps n identity
                |> List.reverse
                |> List.drop 1
                |> List.reverse
                |> Expect.equal (Parameter1d.leading n identity)
        )


trailingIsStepsMinusFirstElement : Test
trailingIsStepsMinusFirstElement =
    Test.fuzz (Fuzz.intRange 0 100)
        "trailing should return the result of steps minus the first element"
        (\n ->
            Parameter1d.steps n identity
                |> List.drop 1
                |> Expect.equal (Parameter1d.trailing n identity)
        )


inBetweenIsStepsMinusFirstAndLastElements : Test
inBetweenIsStepsMinusFirstAndLastElements =
    Test.fuzz (Fuzz.intRange 0 100)
        "inBetween should return the result of steps minus the first and last elements"
        (\n ->
            Parameter1d.steps n identity
                |> List.drop 1
                |> List.reverse
                |> List.drop 1
                |> List.reverse
                |> Expect.equal (Parameter1d.inBetween n identity)
        )


firstValueOfStepsIsZero : Test
firstValueOfStepsIsZero =
    Test.fuzz (Fuzz.intRange 1 100)
        "first parameter value generated by steps should be 0"
        (\n ->
            Parameter1d.steps n identity |> List.head |> Expect.equal (Just 0)
        )


lastValueOfStepsIsOne : Test
lastValueOfStepsIsOne =
    Test.fuzz (Fuzz.intRange 1 100)
        "last parameter value generated by steps should be 1"
        (\n ->
            Parameter1d.steps n identity
                |> List.reverse
                |> List.head
                |> Expect.equal (Just 1)
        )


manualCases : Test
manualCases =
    Test.describe "Manual cases"
        [ Test.test "0 steps"
            (\() ->
                Parameter1d.steps 0 identity
                    |> Expect.equal []
            )
        , Test.test "1 step"
            (\() ->
                Parameter1d.steps 1 identity
                    |> Expect.equal [ 0, 1 ]
            )
        , Test.test "2 steps"
            (\() ->
                Parameter1d.steps 2 identity
                    |> Expect.equal [ 0, 0.5, 1 ]
            )
        , Test.test "5 steps"
            (\() ->
                Parameter1d.steps 5 identity
                    |> Expect.equal [ 0, 0.2, 0.4, 0.6, 0.8, 1 ]
            )
        ]
